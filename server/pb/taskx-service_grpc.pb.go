// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: server/pb/taskx-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskXServiceClient is the client API for TaskXService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskXServiceClient interface {
	AddTask(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CompleteTask(ctx context.Context, in *CompleteTaskReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTasksResp, error)
}

type taskXServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskXServiceClient(cc grpc.ClientConnInterface) TaskXServiceClient {
	return &taskXServiceClient{cc}
}

func (c *taskXServiceClient) AddTask(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TaskXService/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskXServiceClient) CompleteTask(ctx context.Context, in *CompleteTaskReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TaskXService/CompleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskXServiceClient) GetTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTasksResp, error) {
	out := new(GetTasksResp)
	err := c.cc.Invoke(ctx, "/pb.TaskXService/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskXServiceServer is the server API for TaskXService service.
// All implementations must embed UnimplementedTaskXServiceServer
// for forward compatibility
type TaskXServiceServer interface {
	AddTask(context.Context, *AddTaskReq) (*emptypb.Empty, error)
	CompleteTask(context.Context, *CompleteTaskReq) (*emptypb.Empty, error)
	GetTasks(context.Context, *emptypb.Empty) (*GetTasksResp, error)
	mustEmbedUnimplementedTaskXServiceServer()
}

// UnimplementedTaskXServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskXServiceServer struct {
}

func (UnimplementedTaskXServiceServer) AddTask(context.Context, *AddTaskReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedTaskXServiceServer) CompleteTask(context.Context, *CompleteTaskReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}
func (UnimplementedTaskXServiceServer) GetTasks(context.Context, *emptypb.Empty) (*GetTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedTaskXServiceServer) mustEmbedUnimplementedTaskXServiceServer() {}

// UnsafeTaskXServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskXServiceServer will
// result in compilation errors.
type UnsafeTaskXServiceServer interface {
	mustEmbedUnimplementedTaskXServiceServer()
}

func RegisterTaskXServiceServer(s grpc.ServiceRegistrar, srv TaskXServiceServer) {
	s.RegisterService(&TaskXService_ServiceDesc, srv)
}

func _TaskXService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskXServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TaskXService/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskXServiceServer).AddTask(ctx, req.(*AddTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskXService_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskXServiceServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TaskXService/CompleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskXServiceServer).CompleteTask(ctx, req.(*CompleteTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskXService_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskXServiceServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TaskXService/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskXServiceServer).GetTasks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskXService_ServiceDesc is the grpc.ServiceDesc for TaskXService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskXService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TaskXService",
	HandlerType: (*TaskXServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TaskXService_AddTask_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _TaskXService_CompleteTask_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _TaskXService_GetTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/pb/taskx-service.proto",
}
